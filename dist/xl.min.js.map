{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/xlapi.js","xl.min.js","src/main.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","XL","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"XLApi","projectId","baseUrl","makeApiCall","params","success","error","XMLHttpRequest","open","method","endpoint","onreadystatechange","readyState","status","JSON","parse","responseText","message","setRequestHeader","send","postBody","getArguments","prototype","getSocialsURLs","str","key","encodeURIComponent","loginPassAuth","login","pass","rememberMe","body","username","password","remember_me","stringify","smsAuth","phoneNumber","main","options","findAncestor","el","attributes","parentElement","_options","maxXLClickDepth","_socialUrls","undefined","errorHandler","loginPassValidator","b","isMarkupSocialsHandlersEnabled","callbackUrl","apiUrl","callback_url","_api","response","hasOwnProperty","console","getAllElementsWithAttribute","document","addEventListener","target","xlData","nodeValue","authType","prop","callback","startsWith","socialUrl","location","href","res","login_url","createErrorObject","INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE","err","smsAuthStep","attribute","matchingElements","allElements","getElementsByTagName","getAttribute","push","init","__xl","xl","AuthWidget","divName","html","element","getElementById","innerHTML","AuthButton","INVALID_LOGIN_ERROR_CODE","./xlapi"],"mappings":"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","file":"xl.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by a.korotaev on 24.06.16.\n */\n/**\n * Impelements Xsolla Login Api\n * @param projectId - project's unique identifier\n * @param baseUrl - api endpoint\n * @constructor\n */\n\nvar XLApi = function (projectId, baseUrl) {\n    var self = this;\n    this.baseUrl = baseUrl || 'http://login.xsolla.com/api/';\n\n    this.projectId = projectId;\n\n    this.makeApiCall = function (params, success, error) {\n        var r = new XMLHttpRequest();\n        r.open(params.method, self.baseUrl + params.endpoint, true);\n        // r.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        r.onreadystatechange = function () {\n            if (r.readyState == 4) {\n                if (r.status == 200) {\n                    success(JSON.parse(r.responseText));\n                } else {\n                    if (r.responseText) {\n                        error(JSON.parse(r.responseText));\n                    } else {\n                        error({error: {message: 'Networking error', code: r.status}});\n                    }\n                }\n            }\n        };\n        if (params.method == 'POST') {\n            r.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            r.send(params.postBody);\n        } else if (params.method == 'GET') {\n            r.send(params.getArguments);\n        }\n\n        // var responseHandler = function (err, res) {\n        //     if (!err) {\n        //         success(JSON.parse(res.text));\n        //     } else {\n        //         var body = res.body || {message: err.message, code: 10};\n        //         error({error: body});\n        //     }\n        // };\n        //\n        // var method = params.method || 'GET';\n        // var requestUrl = self.baseUrl + params.endpoint;\n        // if (method == 'GET') {\n        //     request.get(requestUrl, responseHandler);\n        // } else if (method == 'POST') {\n        //     request\n        //         .post(requestUrl)\n        //         .set('Content-Type', 'application/json; charset=UTF-8')\n        //         .send(params.postBody)\n        //         .end(responseHandler);\n        // }\n\n    };\n};\n/**\n * Get all avialable social methods auth url\n * @param success - success callback\n * @param error - error callback\n */\nXLApi.prototype.getSocialsURLs = function (success, error, getArguments) {\n    var str = \"\";\n    for (var key in getArguments) {\n        if (str != \"\") {\n            str += \"&\";\n        }\n        str += key + \"=\" + encodeURIComponent(getArguments[key]);\n    }\n\n    return this.makeApiCall({method: 'GET', endpoint: 'social/login_urls?' + str, getArguments: null}, success, error);\n};\n\nXLApi.prototype.loginPassAuth = function (login, pass, rememberMe, success, error) {\n    var body = {\n        username: login,\n        password: pass,\n        remember_me: rememberMe\n    };\n    return this.makeApiCall({method: 'POST', endpoint: 'proxy/login?projectId='+this.projectId, postBody: JSON.stringify(body)}, success, error);\n};\n\nXLApi.prototype.smsAuth = function (phoneNumber, success, error) {\n    return this.makeApiCall({method: 'GET', endpoint: 'sms', getArguments: 'phoneNumber=' + phoneNumber}, success, error);\n};\n\nmodule.exports = XLApi;\n",null,"/**\n * Created by a.korotaev on 24.06.16.\n */\n\nvar XLApi = require('./xlapi');\n/**\n * Create an `Auth0` instance with `options`\n *\n * @class XL\n * @constructor\n */\nfunction XL (options) {\n    var self = this;\n\n    self._socialUrls = undefined;\n\n    self._options = {};\n    self._options.errorHandler = options.errorHandler || function(a) {};\n    self._options.loginPassValidator = options.loginPassValidator || function (a,b) { return true; };\n    self._options.isMarkupSocialsHandlersEnabled = options.isMarkupSocialsHandlersEnabled || false;\n    self._options.callbackUrl = options.callbackUrl || undefined;\n    self._options.apiUrl = options.apiUrl || 'http://login.xsolla.com/api/';\n    self._options.maxXLClickDepth = options.maxXLClickDepth || 20;\n\n    var params = {};\n    params.projectId = options.projectId;\n\n    if (self._options.callbackUrl) {\n        params.callback_url = self._options.callbackUrl;\n    }\n\n    self._api = new XLApi(options.projectId, self._options.apiUrl);\n\n    self._api.getSocialsURLs(function (response) {\n        self._socialUrls = {};\n        for (var key in response) {\n            if (response.hasOwnProperty(key)) {\n                self._socialUrls['sn-' + key] = response[key];\n            }\n        }\n    }, function (e) {\n        console.error(e);\n    }, params);\n\n    var elements = self.getAllElementsWithAttribute('data-xl-auth');\n    var login = '';\n    var pass = '';\n\n    // for (var i = 0; i < elements.length; i++) {\n    //     var nodeValue = elements[i].attributes['data-xl-auth'].nodeValue;\n    //     if (nodeValue.startsWith('sn')) {\n    //         elements[i].onclick = function (nodeValue) {\n    //             return function () {\n    //                 self.login({authType: nodeValue})\n    //             };\n    //         }(nodeValue);\n    //     } else if (nodeValue == 'form-sms') {\n    //         // elements[i].onsubmit = config.eventHandlers.sms;\n    //     } else if (nodeValue == 'form-login_pass') {\n    //         // elements[i].onsubmit = config.eventHandlers.loginPass;\n    //         elements[i].onsubmit = function (login, pass) {\n    //             return function (e) {\n    //                 e.preventDefault();\n    //                 if (self._options.loginPassValidator(login, pass)) {\n    //                     self.login({\n    //                         authType: 'login-pass',\n    //                         login: login,\n    //                         pass: pass\n    //                     }, function (res) {\n    //                         if (res.error) {\n    //                             self._options.errorHandler(res);\n    //                         }\n    //                     });\n    //                 } else {\n    //                     self._options.errorHandler(self.createErrorObject('Login or pass not valid', XL.INVALID_LOGIN_ERROR_CODE));\n    //                 }\n    //             }\n    //         }(login, pass);\n    //     } else if (nodeValue.startsWith('input-')) {\n    //         if (nodeValue == 'input-login') {\n    //             login = '';\n    //         } else if (nodeValue == 'input-pass') {\n    //             pass = '';\n    //         }\n    //     }\n    // }\n\n    // Find closest ancestor with data-xl-auth attribute\n    function findAncestor(el) {\n        if (el.attributes['data-xl-auth']) {\n            return el;\n        }\n        var i = 0;\n        while ((el = el.parentElement) && !el.attributes['data-xl-auth'] && ++i < self._options.maxXLClickDepth);\n        return el;\n    }\n\n    if (self._options.isMarkupSocialsHandlersEnabled) {\n        document.addEventListener('click', function (e) {\n            var target = findAncestor(e.target);\n            // Do nothing if click was outside of elements with data-xl-auth\n            if (!target) {\n                return;\n            }\n            var xlData = target.attributes['data-xl-auth'];\n            if (xlData) {\n                var nodeValue = xlData.nodeValue;\n                if (nodeValue) {\n                    self.login({authType: nodeValue});\n                }\n            }\n        });\n    }\n}\n\nXL.prototype.login = function (prop, callback) {\n    var self = this;\n\n    if (!prop || !self._socialUrls) {\n        return;\n    }\n\n    /**\n     * props\n     * authType: sn-<social name>, login-pass, sms\n     */\n    if (prop.authType) {\n        if (prop.authType.startsWith('sn-')) {\n            var socialUrl = self._socialUrls[prop.authType];\n            if (socialUrl != undefined) {\n                window.location.href = self._socialUrls[prop.authType];\n            } else {\n                console.error('Auth type: ' + prop.authType + ' doesn\\'t exist');\n            }\n\n        } else if (prop.authType == 'login-pass') {\n            self._api.loginPassAuth(prop.login, prop.pass, prop.rememberMe, function (a) {\n                if (res.login_url) {\n                    window.location.href = res.login_url;\n                } else {\n                    callback(self.createErrorObject('Login or pass not valid', XL.INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE));\n                }\n            }, function (err) {\n                callback(err);\n            });\n        } else if (prop.authType == 'sms') {\n            if (smsAuthStep == 'phone') {\n                self._api.smsAuth(prop.phoneNumber, null, null);\n            } else if (smsAuthStep == 'code') {\n\n            }\n\n        } else {\n            console.error('Unknown auth type');\n        }\n    }\n};\n\n\nXL.prototype.getAllElementsWithAttribute = function (attribute) {\n    var matchingElements = [];\n    var allElements = document.getElementsByTagName('*');\n    for (var i = 0, n = allElements.length; i < n; i++)\n    {\n        if (allElements[i].getAttribute(attribute) !== null)\n        {\n            matchingElements.push(allElements[i]);\n        }\n    }\n    return matchingElements;\n};\n\nXL.prototype.createErrorObject = function(message, code) {\n    return {\n        error: {\n            message: message,\n            code: code || -1\n        }\n    };\n};\n\nXL.init = function (params) {\n    if (!window.__xl) {\n        var xl = new XL(params);\n        window.__xl = xl;\n    } else {\n        console.error('XL already init!');\n    }\n};\n\nXL.login = function (prop, callback) {\n    if (window.__xl) {\n        window.__xl.login(prop, callback);\n    } else {\n        console.error('Please run XL.init() first');\n    }\n};\n\nXL.AuthWidget = function (divName, options) {\n    if (!divName) {\n        console.error('No div name!');\n    } else {\n        var html = '<iframe></iframe>';\n        var element = document.getElementById(divName);\n        if (element) {\n            document.getElementById(divName).innerHTML = html;\n        } else {\n            console.error('Element ' + divName +' not found!');\n        }\n    }\n};\n\nXL.AuthButton = function (divName, options) {\n\n};\n\nXL.INVALID_LOGIN_ERROR_CODE = 1;\nXL.INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE = 2;\n\nmodule.exports = XL;"],"sourceRoot":"."}